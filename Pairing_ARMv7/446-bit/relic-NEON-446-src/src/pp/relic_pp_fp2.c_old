/*
 * RELIC is an Efficient LIbrary for Cryptography
 * Copyright (C) 2007, 2008, 2009 RELIC Authors
 *
 * This file is part of RELIC. RELIC is legal property of its developers,
 * whose names are not listed here. Please refer to the COPYRIGHT file
 * for contact information.
 *
 * RELIC is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * RELIC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with RELIC. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * MODIFIED BY: Patrick Longa, 05/2011.
 *
 */

/**
 * @file
 *
 * Implementation of arithmetic in a quadratic extension over a prime field.
 *
 * @version $Id: relic_pp_fp2.c 263 2010-02-05 03:02:42Z conradoplg $
 * @ingroup fp2
 */

#include "relic_core.h"
#include "relic_conf.h"
#include "relic_fp.h"
#include "relic_pp.h"
#include "relic_util.h"

/*============================================================================*/
/* Private definitions                                                        */
/*============================================================================*/

/**
 * Constant used to compute the Frobenius map in higher extensions.
 */
fp2_st const_frb[7];

/**
 * Constant used to compute consecutive Frobenius maps in higher extensions.
 */
static fp_st const_sqr[3];

/*============================================================================*/
/* Public definitions                                                         */
/*============================================================================*/

void fp2_const_init() {
#if ALLOC == STATIC
	fp2_new(const_frb);
#endif
}

void fp2_const_clean() {
#if ALLOC == STATIC
	fp2_free(const_frb);
#endif
}

/*
void fp2_const_calc() {
	bn_t e;
	fp2_t t;

	bn_null(e);
	fp2_null(t);

	TRY {
		bn_new(e);
		fp2_new(t);
		fp2_zero(t);
		fp_set_dig(t[0], 1);
		fp2_mul_nor(t, t);
		e->used = FP_DIGS;
		dv_copy(e->dp, fp_prime_get(), FP_DIGS);
		bn_sub_dig(e, e, 1);
		bn_div_dig(e, e, 6);
		fp2_exp(t, t, e);
		fp_copy(const_frb[0], t[0]);
		fp_copy(const_frb[1], t[1]);
	} CATCH_ANY {
		THROW(ERR_CAUGHT);
	} FINALLY {
		bn_free(e);
		fp2_free(t);
	}
}
*/
void fp2_const_calc() {
        bn_t e;
	fp2_t t, t1;

	bn_null(e);
	fp2_null(t);
	fp2_null(t1);

	TRY {
	        bn_new(e);
		fp2_new(t);
		fp2_new(t1);
		fp2_zero(t);
		fp_set_dig(t[0], 1);
		fp2_mul_nor(t, t);
		fp2_copy(t1, t);
		fp_neg(t1[1], t1[1]);
		fp2_mul(t1, t1, t);
		
		e->used = FP_DIGS;
		dv_copy(e->dp, fp_prime_get(), FP_DIGS);
		bn_sub_dig(e, e, 1);
		bn_div_dig(e, e, 6);
		
		fp2_exp(t, t, e);
		fp2_exp(t1, t1, e);
		fp_copy(const_frb[0][0], t[0]);
		fp_copy(const_frb[0][1], t[1]);
		fp2_sqr(const_frb[1], const_frb[0]);
		fp2_mul(const_frb[2], const_frb[1], const_frb[0]);
		fp2_sqr(const_frb[3], const_frb[1]);
		fp2_mul(const_frb[4], const_frb[3], const_frb[0]);
		
		fp_copy(const_sqr[0], t1[0]);
		fp_sqr(const_sqr[1], const_sqr[0]);
		fp_mul(const_sqr[2], const_sqr[1], const_sqr[0]);

		//for m-type twist
		if(fp_param_get() != BNN_256){
		fp2_zero(t);
		fp_set_dig(t[0], 1);
		fp2_mul_nor(t, t);

		fp2_mul_nor(const_frb[5], const_frb[3]);
		fp2_mul_nor(const_frb[6], const_frb[2]);
		fp2_inv(const_frb[7], t);}
	} CATCH_ANY {
	        THROW(ERR_CAUGHT);
	} FINALLY {
	        bn_free(e);
		fp2_free(t);
		fp2_free(t1);
	}
}

void fp2_mul_frb(fp2_t c, fp2_t a, int i) {
        fp2_mul(c, a, const_frb[i-1]);
}

void fp2_mul_frb_sqr(fp2_t c, fp2_t a, int i) {
        fp_mul(c[0], a[0], const_sqr[i-1]);
        fp_mul(c[1], a[1], const_sqr[i-1]);
}

void fp2_dbl(fp2_t c, fp2_t a) {
	/* 2 * (a0 + a1 * u) = 2 * a0 + 2 * a1 * u. */
	fp_dbl(c[0], a[0]);
	fp_dbl(c[1], a[1]);
}


/*void fp2_mul(fp2_t c, fp2_t a, fp2_t b) {
// Full quadratic extension field multiplication using Karatsuba

	fp_t t0, t1, t2;

	fp_null(t0);
	fp_null(t1);
	fp_null(t2);

	TRY {

		fp_new(t0);
		fp_new(t1);
		fp_new(t2);

		// Karatsuba algorithm. //
		fp_mul(t0, a[0], b[0]);
		fp_print(t0);
		fp_mul(t1, a[1], b[1]);
		fp_print(t1);
		fp_add(t2, a[0], a[1]);
		fp_print(t2);
		fp_add(c[1], b[0], b[1]);
		fp_print(c[1]);
		fp_mul(c[1], c[1], t2);
		fp_print(c[1]);
		fp_sub(c[1], c[1], t0);
		fp_print(c[1]);
		fp_sub(c[1], c[1], t1);
		fp_print(c[1]);
		fp_sub(c[0], t0, t1);
		fp_print(c[0]);

		if (fp_prime_get_qnr() == -2) {
			fp_sub(c[0], c[0], t1);
		}
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp_free(t0);
		fp_free(t1);
		fp_free(t2);
	}
}*/


void fp2_mul(fp2_t c, fp2_t a, fp2_t b) {
// Full quadratic extension field multiplication using Karatsuba and lazy reduction
        fp_t t0, t1;
        dv_t D0, D1, D2;

        fp_null(t0);
        fp_null(t1);
        dv_null(D0);
        dv_null(D1);
        dv_null(D2);

        TRY {
                fp_new(t0);
                fp_new(t1);
                dv_new(D0);
                dv_new(D1);
                dv_new(D2);

                // Karatsuba algorithm. //
                fp_muln_low(D0, a[0], b[0]);            // D0 = a0*b0
                fp_muln_low(D1, a[1], b[1]);            // D1 = a1*b1
                fp_subd(D2, D0, D1);                    // D2 = a0*b0 - a1*b1
                if (fp_prime_get_qnr() == -2) {
                       fp_subd(D2, D2, D1);             // D2 = a0*b0 + beta*a1*b1
                }
                fp_add(t0, a[0], a[1]);                 // t0 = a0+a1
                fp_add(t1, b[0], b[1]);                 // t1 = b0+b1
                fp_rdc(c[0],D2);                        // c0
                fp_muln_low(D2, t0, t1);                // D[1] = (a0+a1)(b0+b1)
                fp_subd(D2, D2, D0);                    // D[1] = (a0+a1)(b0+b1) - a0*b0
                fp_subd(D2, D2, D1);                    // D[1] = (a0+a1)(b0+b1) - a0*b0 - a1*b1
                fp_rdc(c[1],D2);                        // c1
        }
        CATCH_ANY {
                THROW(ERR_CAUGHT);
        }
        FINALLY {
                fp_free(t0);
                fp_free(t1);
                dv_free(D0);
                dv_free(D1);
                dv_free(D2);
        }
}

void fp2_mul_nr(dv2_t D, fp2_t a, fp2_t b) {
// Quadratic extension field multiplication w/o reduction using Karatsuba and lazy reduction
        fp_t t0, t1;
        dv_t D0, D1;

        fp_null(t0);
        fp_null(t1);
        dv_null(D0);
        dv_null(D1);

        TRY {
                fp_new(t0);
                fp_new(t1);
                dv_new(D0);
                dv_new(D1);

                // Karatsuba algorithm. //
                fp_muln_low(D0, a[0], b[0]);            // D0 = a0*b0
                fp_muln_low(D1, a[1], b[1]);            // D1 = a1*b1
                fp_subd(D[0], D0, D1);                  // D[0] = a0*b0 - a1*b1
                if (fp_prime_get_qnr() == -2) {
                       fp_subd(D[0], D[0], D1);         // D[0] = a0*b0 + beta*a1*b1
                }
                fp_add(t0, a[0], a[1]);                 // t0 = a0+a1
                fp_add(t1, b[0], b[1]);                 // c1 = b0+b1
                //fp_rdc(c[0],D[0]);                    // c0
                fp_muln_low(D[1], t0, t1);              // D[1] = (a0+a1)(b0+b1)
                fp_subd(D[1], D[1], D0);                // D[1] = (a0+a1)(b0+b1) - a0*b0
                fp_subd(D[1], D[1], D1);                // D[1] = (a0+a1)(b0+b1) - a0*b0 - a1*b1
                //fp_rdc(c[1],D2);                      // c1
         }
         CATCH_ANY {
                THROW(ERR_CAUGHT);
         }
         FINALLY {
                fp_free(t0);
                fp_free(t1);
                dv_free(D0);
                dv_free(D1);
         }
}

/*
static inline void fp2_mulkar_nr(dv2_t D, fp2_t a, fp2_t b) {
// Quadratic extension field multiplication using Karatsuba and lazy reduction
        fp_t t0, t1;
        dv_t D0, D1;

	fp_null(t0);
	fp_null(t1);
	dv_null(D0);
	dv_null(D1);

        TRY {
	        fp_new(t0);
                fp_new(t1);
		dv_new(D0);
                dv_new(D1);

		// Karatsuba algorithm. //
	        fp_muln_low(D0, a[0], b[0]);            // D0 = a0*b0
	        fp_muln_low(D1, a[1], b[1]);            // D1 = a1*b1
                fp_subd(D[0], D0, D1);                  // D[0] = a0*b0 - a1*b1
                if (fp_prime_get_qnr() == -2) {
		       fp_subd(D[0], D[0], D1);         // D[0] = a0*b0 + beta*a1*b1
                }
	        fp_add(t0, a[0], a[1]);                 // t0 = a0+a1
	        fp_add(t1, b[0], b[1]);                 // c1 = b0+b1
                //fp_rdc(c[0],D[0]);                    // c0
	        fp_muln_low(D[1], t0, t1);              // D[1] = (a0+a1)(b0+b1)
	        fp_subd(D[1], D[1], D0);                // D[1] = (a0+a1)(b0+b1) - a0*b0
	        fp_subd(D[1], D[1], D1);                // D[1] = (a0+a1)(b0+b1) - a0*b0 - a1*b1
		//fp_rdc(c[1],D2);                      // c1
        }
        CATCH_ANY {
	  THROW(ERR_CAUGHT);
        }
        FINALLY {
	  fp_free(t0);
          fp_free(t1);
          dv_free(D0);
          dv_free(D1);
        }
}

void fp2_mul(fp2_t c, fp2_t a, fp2_t b) {
// Full quadratic extension field multiplication
        dv2_t C;

        dv2_null(C);

        TRY {
                 dv2_new(C);

                 fp2_mulkar_nr(C, a, b);      // Karatsuba multiplication            
                 fp2_rdc(c,C);
        }
        CATCH_ANY {
                 THROW(ERR_CAUGHT);
        }
        FINALLY {
                 dv2_free(C);
        }
}

void fp2_mul_nr(dv2_t C, fp2_t a, fp2_t b) {
// Quadratic extension field multiplication w/o reduction           
        TRY {
                 fp2_mulkar_nr(C, a, b);      // Karatsuba multiplication
        }
        CATCH_ANY {
                 THROW(ERR_CAUGHT);
        }
        FINALLY {
        }
}
*/

void fp2_mul_art(fp2_t c, fp2_t a) {
	fp_t t0;

	fp_null(t0);

	TRY {
		fp_new(t0);

		/* (a0 + a1 * u) * u = a1 * u^2 + a0 * u. */
		fp_copy(t0, a[0]);
		fp_neg(c[0], a[1]);
		if (fp_prime_get_qnr() == -2) {
			fp_dbl(c[0], c[0]);
		}
		fp_copy(c[1], t0);
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp_free(t0);
	}
}

void fp2_mul_artd(dv2_t C, dv2_t A) {
        dv_t T0;

        dv_null(T0);

        TRY {
                dv_new(T0);

                /* (a0 + a1 * u) * u = a1 * u^2 + a0 * u. */
                dv_copy(T0, A[0], 2*FP_DIGS);
                fp_negd(C[0], A[1]);
                if (fp_prime_get_qnr() == -2) {
		        fp_addd(C[0], C[0], C[0]);
                }
                dv_copy(C[1], T0, 2*FP_DIGS);
        }
        CATCH_ANY {
                THROW(ERR_CAUGHT);
        }
        FINALLY {
                dv_free(T0);
        }
}

void fp2_mul_nor(fp2_t c, fp2_t a) {
	fp2_t t0;

	fp2_null(t0);

	TRY {
		fp2_new(t0);

		switch (fp_prime_get_mod8()) {
			case 5:
				/* If p = 5 mod 8, x^2 - sqrt(sqrt(-2)) is irreducible. */
				fp2_mul_art(c, a);
				break;
			case 3:
				/* If p = 3 mod 8, x^2 - sqrt(1 + sqrt(-1)) is irreducible. */
				//fp2_mul_art(t0, a);
				//fp2_add(c, t0, a);
				fp_sub(t0[0], a[0], a[1]);
				fp_add(c[1], a[0], a[1]);
				fp_copy(c[0], t0[0]);
				break;
			case 7:
				/* If p = 7 mod 8 and p = 2,3 mod 5, x^2 - sqrt(2 + sqrt(-1)) is
				 * irreducible. */
				//fp2_mul_art(t0, a);
				//fp2_add(c, t0, a);
				fp_dbl(t0[0], a[1]);
				fp_sub(t0[0], a[0], t0[0]);
				fp_add(c[1], a[1], a[0]);
				fp_copy(c[0], t0[0]);
				break;
			default:
				THROW(ERR_INVALID);
		}
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp2_free(t0);
	}
}

void fp2_mul_nord(dv2_t C, dv2_t A) {
        dv2_t T0;

        dv2_null(T0);

        TRY {
                dv2_new(T0);

                switch (fp_prime_get_mod8()) {
                case 5:
                /* If p = 5 mod 8, x^2 - sqrt(sqrt(-2)) is irreducible. */
                       fp2_mul_artd(C, A);
                break;
                case 3:
                /* If p = 3 mod 8, x^2 - sqrt(1 + sqrt(-1)) is irreducible. */
                      // fp2_mul_artd(T0, A);
                       //fp2_addd(C, T0, A);
			fp_subd(T0[0], A[0], A[1]);
			fp_addd(C[1], A[0], A[1]);
			dv_copy(C[0], T0[0], 2*FP_DIGS);
                break;
                case 7:
                /* If p = 7 mod 8 and p = 2,3 mod 5, x^2 - sqrt(2 + sqrt(-1)) is
                 * irreducible. */
                       //fp2_mul_artd(T0, A);
                       //fp2_addd(T1, T0, A);

			fp_addd(T0[0], A[1], A[1]);
			fp_subd(T0[0], A[0], T0[0]);
			fp_addd(C[1], A[1], A[0]);
			dv_copy(C[0], T0[0], 2*FP_DIGS);

                break;
                default:
                       THROW(ERR_INVALID);
                }
        }
        CATCH_ANY {
                THROW(ERR_CAUGHT);
        }
        FINALLY {
                dv2_free(T0);
        }
}

void fp2_sqr(fp2_t c, fp2_t a) {
	fp_t t0, t1;

	fp_null(t0);
	fp_null(t1);

	TRY {
		fp_new(t0);
		fp_new(t1);

		fp_add(t0, a[0], a[1]);          // t0 = (a0 + a1)
		fp_sub(t1, a[0], a[1]);          // t1 = (a0 - a1)			
		if (fp_prime_get_qnr() == -2) {
		        fp_sub(t1, t1, a[1]);    // t1 = (a0 - 2 * a1)
		}
		fp_mul(c[1], a[0], a[1]);        // c_1 = a0 * a1

		// c_0 = a0^2 + b_0^2 * u^2
		fp_mul(c[0], t0, t1);
		if (fp_prime_get_qnr() == -2) {
			fp_add(c[0], c[0], c[1]);
		}
		fp_dbl(c[1], c[1]);              // c_1 = 2 * a0 * a1
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp_free(t0);
		fp_free(t1);
	}
}

void fp2_sqr_nr(dv2_t C, fp2_t a) {
        fp_t t0, t1;

	fp_null(t0);
	fp_null(t1);

	TRY {
	        fp_new(t0);
		fp_new(t1);

		fp_add(t0, a[0], a[1]);                // t0 = (a0 + a1)
		fp_sub(t1, a[0], a[1]);                // t1 = (a0 - a1)
		if (fp_prime_get_qnr() == -2) {
		         fp_sub(t1, t1, a[1]);         // t1 = (a0 - 2 * a1)		     
		}

		fp_muln_low(C[1], a[0], a[1]);         // C_1 = a0 * a1
		fp_muln_low(C[0], t0, t1);   	       // C_0 = a0^2 + b_0^2 * u^2
		if (fp_prime_get_qnr() == -2) {
                         fp_addd(C[0], C[0], C[1]);
		}
		fp_addd(C[1], C[1], C[1]);             // C_1 = 2 * a0 * a1
	}
	CATCH_ANY {
	        THROW(ERR_CAUGHT);
	}
	FINALLY {
	        fp_free(t0);
		fp_free(t1);
	}
}

void fp2_inv(fp2_t c, fp2_t a) {
	fp_t t, t0;
	dv_t T0, T1;

	fp_null(t);
	fp_null(t0);
	dv_null(T0);
	dv_null(T1);

	TRY {
		//printf("inverting \n");
		//fp_print(fp_prime_get());
		//fp2_print(a);
		fp_new(t);
		fp_new(t0);
		dv_new(T0);
		dv_new(T1);

		/* t0 = a0^2, t1 = a1^2. */
		fp_muln_low(T0, a[0], a[0]);
		fp_muln_low(T1, a[1], a[1]);

		if (fp_prime_get_qnr() == -2) {
			fp_addd(T1, T1, T1);
		}

		/* t1 = 1/(a0^2 + a1^2). */
		fp_addd(T0, T0, T1);
		fp_rdc(t0, T0);
		fp_inv(t, t0);

		/* c_0 = a0/(a0^2 + a1^2). */
		fp_mulm_low(c[0], a[0], t);
		/* c_1 = - a1/(a0^2 + a1^2). */
		fp_mulm_low(c[1], a[1], t);
		fp_neg(c[1], c[1]);
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp_free(t0);
		fp_free(t);
		dv_free(T0);
		dv_free(T1);
	}
}

void fp2_frb(fp2_t c, fp2_t a) {
	/* (a0 + a1 * u)^p = a0 - a1 * u. */
	fp_copy(c[0], a[0]);
	fp_neg(c[1], a[1]);
}

void fp2_exp(fp2_t c, fp2_t a, bn_t b) {
	fp2_t t;

	fp2_null(t);

	TRY {
		fp2_new(t);

		fp2_copy(t, a);

		for (int i = bn_bits(b) - 2; i >= 0; i--) {
			fp2_sqr(t, t);
			if (bn_test_bit(b, i)) {
				fp2_mul(t, t, a);
			}
		}
		fp2_copy(c, t);
	}
	CATCH_ANY {
		THROW(ERR_CAUGHT);
	}
	FINALLY {
		fp2_free(t);
	}
}
